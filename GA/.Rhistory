detach("package:scales", unload=TRUE)
plot(output)
library(GA)
plot(output)
output <- GA::select(y, x, objective_function = stats::extractAIC)
output <- GA::select(y, x, objective_function = stats::AIC)
plot(output)
output <- GA::select(y, x, objective_function = stats::BIC)
document()
library(GA)
select(y, x)
as.character(AIC)
paste(AIC)
AIC
output(list = AIC)
list(AIC)
match.fun(AIC)
str(match.fun(AIC))
?substitute
substitute(AIC)
paste(substitute(AIC))
document()
document()
library(GA)
x
output(y, x)
output <- GA::select(y, x)
document()
library(GA)
output <- GA::select(y, x)
plot(output)
paste(substitute(stats::AIC))
paste(substitute(AIC))
as.character(substitute(AIC))
as.character(substitute(stats::AIC))
substitute(stats::AIC)
substitute(stats::BIC)
library(GA)
output <- GA::select(y, x)
plot(output)
output <- GA::select(y, x, objective_function = stats::logLik, minimize = FALSE)
plot(output)
library(GA)
output <- GA::select(y, x, objective_function = stats::logLik, minimize = FALSE)
plot(output)
?legend
output$optimize
isTRUE(output$optimize$minimize)
library(GA)
output <- GA::select(y, x, objective_function = stats::logLik, minimize = FALSE)
plot(output)
library(GA)
GA::select(y, x)
dat$relpred
GA::select(y, x)
ouput <- GA::select(y, x)
output$convergeData[, , 79]
output$convergeData[, , 78]
ouput$convergeData[, , 79]
order(ouput$convergeData[, , 79])
ouput$convergeData[, , 79]
library(GA)
output <- GA::select(y, x)
output$BestModel
output$convergeData[, 1, 79]
output$convergeData[, 1, 55]
library(GA)
output <- GA::select(y, x)
output$BestModel
colMeans(output$BestModel[1:5, ])
colnames(X)[round(colMeans(output$BestModel[1:5, ]), 0) == 1]
colnames(x)[round(colMeans(output$BestModel[1:5, ]), 0) == 1]
dat$relpred
colnames(x)[round(colMeans(output$BestModel[195:200, ]), 0) == 1]
colnames(x)[output$BestModel[1, ] == 1]
output$convergeData[, , 79]
output$convergeData[, , 55]
output$convergeData[, , 56]
output$convergeData[, , 57]
output$convergeData[, , 5]
output$convergeData[, , 58]
dim(output$convergeData[, , ])
output$convergeData[, , 67]
library(GA)
??GA::select
??GA::select
?GA::select
library(simrel)
library(GA)
n <- 100 # number obs
p <- 25 # number predictors
m <- 2 # number relevant latent components
q <- 5 # number relevant predictors
gamma <- 0.2 # speed of decline in eigenvalues
R2 <- 0.5 # theoretical R-squared according to the true linear model
relpos <- sample(1:p, m, replace = F) # positions of m
dat <- simrel(n, p, m, q, relpos, gamma, R2) # generate data
x <- dat$X
y <- dat$Y
p <- 10
dat <- simrel(n, p, m, q, relpos, gamma, R2) # generate data
relpos <- sample(1:p, m, replace = F) # positions of m
dat <- simrel(n, p, m, q, relpos, gamma, R2) # generate data
x <- dat$X
y <- dat$Y
output <- GA::select(y, x)
output$convergeData[, , 100]
dat$relpred
colnames(x)[round(colMeans(output$BestModel[195:200, ]), 0) == 1]
output$BestModel
output$BestModel[1:5,]
dat$relpred
colMeans(output$BestModel[1:5,])
round(colMeans(output$BestModel[1:5,]), 0)
colnames(x)[round(colMeans(output$BestModel[1:5,]), 0) == 1]
plot(output)
library(GA)
colMeans(output$BestModel[,])
colMeans(output$BestModel[1:50,])
colMeans(output$BestModel[1:10,])
output <- GA::select(y, x)
plot(output)
output$Best_mpodel
output$convergeData
library(GA)
output <- GA::select(y, x)
library(GA)
output <- GA::select(y, x)
plot(output)
library(GA)
output <- GA::select(y, x)
plot(output)
output$convergeData[, , 100]
output <- GA::select(y, x, minimize = T)
plot(output)
output <- GA::select(y, x, stats::BIC)
output <- GA::select(y, x, objective_function = stats::BIC)
output <- GA::select(y, x, stats::logLik)
output <- GA::select(y, x, objective_function = stats::logLik)
plot(output)
output$convergeData[,,100]
library(GA)
output <- GA::select(y, x, objective_function = stats::logLik)
output <- GA::select(y, x, objective_function = stats::logLik)
plot(output)
output <- GA::select(y, x, objective_function = stats::logLik, minimize = F)
plot(output)
rm(list=ls())
library(simrel)
n <- 100 # number obs
p <- 10 # number predictors
m <- 5 # number relevant latent components
q <- 5 # number relevant predictors
gamma <- 0.2 # speed of decline in eigenvalues
R2 <- 0.5 # theoretical R-squared according to the true linear model
relpos <- sample(1:p, m, replace = F) # positions of m
dat <- simrel(n, p, m, q, relpos, gamma, R2) # generate data
x <- dat$X
y <- dat$Y
library(GA)
output <- GA::select(y, x)
plot(output)
library(GA)
output <- GA::select(y, x)
plot(output)
library(GA)
output <- GA::select(y, x)
plot(output)
output <- GA::select(y, x, minimize = T)
plot(output)
output$convergeData[, , 25]
library(GA)
document()
library(GA)
output <- GA::select(y, x)
plot(output)
output$convergeData[, , 42]
library(GA)
output <- GA::select(y, x)
library(GA)
output <- GA::select(y, x)
library(GA)
output <- GA::select(y, x)
library(GA)
output <- GA::select(y, x)
library(GA)
output <- GA::select(y, x)
plot(output)
output$convergeData[, , 100]
library(GA)
output <- GA::select(y, x)
plot(output)
dat$relpred
output$Best_mpodel
library(GA)
output$Best_mpodel
plot(output)
output <- GA::select(y, x)
plot(output)
output$Best_mpodel
library(GA)
output <- GA::select(y, x)
plot(output)
output$Best_mpodel
colMeans(output$Best_mpodel)
round(colMeans(output$Best_mpodel), 0) == 1
colnames(x)[round(colMeans(output$Best_mpodel), 0) == 1]
dat$relpred
colnames(x)[round(colMeans(output$Best_mpodel[1:5,]), 0) == 1]
colnames(x)[round(colMeans(output$Best_mpodel[1:100,]), 0) == 1]
colnames(x)[round(colMeans(output$Best_mpodel[1:100,]), 0) == 1]
dim(output$Best_mpodel)
colnames(x)[round(colMeans(output$Best_mpodel[1:22,]), 0) == 1]
library(GA)
output <- GA::select(y, x)
dat$relpred
output$Best_model
library(GA)
?GA::select
rm(list = ls())
set.seed(243)
# simulate data for gaussian GLM
library(simrel)
library(GA)
n <- 100 # number obs
p <- 25 # number predictors
m <- 2 # number relevant latent components
q <- 5 # number relevant predictors
gamma <- 0.2 # speed of decline in eigenvalues
R2 <- 0.5 # theoretical R-squared according to the true linear model
relpos <- sample(1:p, m, replace = F) # positions of m
dat <- simrel(n, p, m, q, relpos, gamma, R2) # generate data
x <- dat$X
y <- dat$Y
output <- <- GA::select(y, x)
output <- GA::select(y, x)
dat$relpred
output$Best_model
plot(output)
?legend
output$optimize
library(GA)
?GA::select
document()
library(GA)
?GA::select
rm(list = ls())
set.seed(243)
# simulate data for gaussian GLM
library(simrel)
library(GA)
n <- 100 # number obs
p <- 25 # number predictors
m <- 2 # number relevant latent components
q <- 10 # number relevant predictors
gamma <- 0.5 # speed of decline in eigenvalues
R2 <- 0.75 # theoretical R-squared according to the true linear model
relpos <- sample(1:p, m, replace = F) # positions of m
dat <- simrel(n, p, m, q, relpos, gamma, R2) # generate data
x <- dat$X
y <- dat$Y
output <- GA::select(y, x)
plot(output)
dat$relpred
output$Best_model
?duplicated
library(GA)
output <- GA::select(y, x)
dat$relpred
output$Best_model
plot(output)
library(GA)
plot(output)
?isTRUE
output$optimize
library(GA)
plot(output)
?isTRUE
library(GA)
library(GA)
plot(output)
library(GA)
output <- GA::select(y, x)
plot(output)
dat$relpred
output$Best_model
choose(20, 2)
document()
library(GA)
output <- GA::select(y, x)
rm(list = ls())
?GA::select
rm(list = ls())
set.seed(1111)
# simulate data for gaussian GLM
library(simrel)
library(GA)
n <- 100 # number obs
p <- 20 # number predictors
m <- 2 # number relevant latent components
q <- 10 # number relevant predictors
gamma <- 0.2 # speed of decline in eigenvalues
R2 <- 0.5 # theoretical R-squared according to the true linear model
relpos <- sample(1:p, m, replace = F) # positions of m
dat <- simrel(n, p, m, q, relpos, gamma, R2) # generate data
x <- dat$X
y <- dat$Y
output <- GA::select(y, x)
plot(output)
dat$relpred
output$Best_model
best <- convergeData[, , i]
library(GA)
output <- GA::select(y, x)
library(GA)
output <- GA::select(y, x)
library(GA)
output <- GA::select(y, x)
output$convergeData
output$convergeData[, , 55]
dim(output$convergeData)
output$convergeData[, , 47]
best <- output$convergeData[, , 47]
dim(best)
best
best[best[, 2] == best[1, 2], ]
library(GA)
output <- GA::select(y, x)
dat$relpred
output$Best_model
dat$relpred %in% output$Best_model
document()
library(GA)
?GA::select
rm(list = ls())
set.seed(1111)
# simulate data for gaussian GLM
library(simrel)
library(GA)
n <- 100 # number obs
p <- 10 # number predictors
m <- 2 # number relevant latent components
q <- 5 # number relevant predictors
gamma <- 0.2 # speed of decline in eigenvalues
R2 <- 0.5 # theoretical R-squared according to the true linear model
relpos <- sample(1:p, m, replace = F) # positions of m
dat <- simrel(n, p, m, q, relpos, gamma, R2) # generate data
x <- dat$X
y <- dat$Y
output <- GA::select(y, x)
library(GA)
output <- GA::select(y, x)
dat$relpred
output$Best_model
dat$beta
dat$beta0
dat$beta0
dat$beta
?simrel
c(?simrel)
c(dat$beta)
document()
library(GA)
library(GA)
?GA::select
library(simrel)
library(GA)
n <- 100 # number obs
p <- 10 # number predictors
m <- 2 # number relevant latent components
q <- 5 # number relevant predictors
gamma <- 0.2 # speed of decline in eigenvalues
R2 <- 0.5 # theoretical R-squared according to the true linear model
relpos <- sample(1:p, m, replace = F) # positions of m
dat <- simrel(n, p, m, q, relpos, gamma, R2) # generate data
x <- dat$X
y <- dat$Y
pr = 1/(1+exp(-y))
y_binomial = rbinom(n, 1, pr)
hist(y_binomial)
y
output <- GA::select(y_binomial, x, family = "binomial")
class(y_binomial)
is.matrix(y_binomial)
is.vector(y_binomial)
ncol(Y)
ncol(y_binomial)
ncol(y_binomial) > 1
if(!ncol(y_binomial) > 1)
if(!ncol(y_binomial) > 1)
!ncol(y_binomial) > 1
!ncol(y_binomial) > 1
!ncol(y_binomial) > 1
output <- GA::select(y, x, family = "binomial")
output <- GA::select(y, x, family = "gaussian")
output <- GA::select(y_binomial, x, family = "binomial")
library(GA)
output <- GA::select(y_binomial, x, family = "binomial")
library(GA)
output <- GA::select(y_binomial, x, family = "binomial")
plot(output)
output <- GA::select(y_binomial, x, family = "binomial", converge = F)
plot(output)
dat$relpred
output$Best_model
library(GA)
output <- GA::select(y_binomial, x, family = "binomial", converge = F)
plot(output)
output <- GA::select(y_binomial, x, family = "binomial", converge = T)
plot(output)
dat$relpred
output$Best_model
dat$beta
n <- 100 # number obs
p <- 10 # number predictors
m <- 1 # number relevant latent components
q <- 5 # number relevant predictors
gamma <- 0.2 # speed of decline in eigenvalues
R2 <- 0.5 # theoretical R-squared according to the true linear model
relpos <- sample(1:p, m, replace = F) # positions of m
dat <- simrel(n, p, m, q, relpos, gamma, R2) # generate data
x <- dat$X
y <- dat$Y
R2 <- 0.75 # theoretical R-squared according to the true linear model
relpos <- sample(1:p, m, replace = F) # positions of m
dat <- simrel(n, p, m, q, relpos, gamma, R2) # generate data
x <- dat$X
y <- dat$Y
pr = 1/(1+exp(-y))
y_binomial = rbinom(n, 1, pr)
hist(y_binomial)
class(y_binomial)
is.matrix(y_binomial)
is.vector(y_binomial)
output <- GA::select(y_binomial, x, family = "binomial", converge = T)
plot(output)
dat$relpred
dat$beta
output$Best_model
library(GA)
library(simrel)
library(GA)
n <- 100 # number obs
p <- 10 # number predictors
m <- 1 # number relevant latent components
q <- 5 # number relevant predictors
gamma <- 0.2 # speed of decline in eigenvalues
R2 <- 0.75 # theoretical R-squared according to the true linear model
relpos <- sample(1:p, m, replace = F) # positions of m
dat <- simrel(n, p, m, q, relpos, gamma, R2) # generate data
x <- dat$X
y <- dat$Y
pr = 1/(1+exp(-y))
y_binomial = rbinom(n, 1, pr)
hist(y_binomial)
class(y_binomial)
output <- GA::select(y, x, family = "gaussian")
output <- GA::select(y_binomial, x, family = "binomial", converge = T)
plot(output)
dat$relpred
dat$beta
output$Best_model
output <- GA::select(y, x, family = "gaussian")
plot(output)
dat$relpred
dat$beta
output$Best_model
plot(y, y_binomial)
plot(y,     print(dim(best_scores)))
plot(y, pr)
library(simrel)
library(GA)
n <- 1000 # number obs
p <- 25 # number predictors
m <- 1 # number relevant latent components
q <- 5 # number relevant predictors
gamma <- 0.2 # speed of decline in eigenvalues
R2 <- 0.75 # theoretical R-squared according to the true linear model
relpos <- sample(1:p, m, replace = F) # positions of m
dat <- simrel(n, p, m, q, relpos, gamma, R2) # generate data
x <- dat$X
y <- dat$Y
output <- GA::select(y, x, family = "gaussian")
plot(output)
dat$relpred
dat$beta
output$Best_model
dat$relpred
dat$relpred %in% output$Best_model
dat$relpred
output$Best_model
dat$relpred %in% output$Best_model
c(dat$beta)
output <- GA::select(y, x, family = "gaussian", crossover_method = "method3")
plot(output)
output$Best_model
dat$relpred
dat$relpred %in% output$Best_model
library(GA)
n <- 100 # number obs
p <- 25 # number predictors
m <- 1 # number relevant latent components
q <- 5 # number relevant predictors
gamma <- 0.2 # speed of decline in eigenvalues
R2 <- 0.75 # theoretical R-squared according to the true linear model
relpos <- sample(1:p, m, replace = F) # positions of m
dat <- simrel(n, p, m, q, relpos, gamma, R2) # generate data
x <- dat$X
y <- dat$Y
output <- GA::select(y, x, family = "gaussian", crossover_method = "method3")
output$convergeData[,,37]
rm(list=ls())
