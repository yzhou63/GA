{
    "collab_server" : "",
    "contents" : "################################################################\n#\n# parent selection, crossover, and child mutation functions\n# Xu, Weijie; Chen, Yuwen; Adams, Cameron; Zhou, Yilin\n#\n# Final Projct\n# STAT 243\n# Fall 2017\n#\n################################################################\n\n#' Selection of Parents for Crossover\n#'\n#' Selection of first parent is done according to fitness ranks generated with \\code{\\link{rank_objective_function}}. Probably of parent rank, \\eqn{\\frac{2\\ r_{i}}{P(P+1)}}, from \\eqn{i = 1,...,P}, where rank_i are fitness ranks of each parent chromosomes, and P is number of of parent chromosomes. The second parent is selected randomly and will not be the same as the previous parent. Fucntion returns ranks of select parents to be used for \\code{\\link{crossover_parents}}.\n#'\n#' @param parent_rank a vector indicating the rank of parents chromosomes. Ranking order is inverse: parent chromosomes with lowest fitness rank will have rank == 1.\n#'\n#' References:\n#' Geof H. Givens, Jennifer A. Hoeting (2013) Combinatorial Optimization (italicize). Chapter 3 of Computational Statistics (italicize).\n#' @export\n\n\nselect_parents <- function(parent_rank) {\n\n    # get number of chromosomes\n    P <- length(parent_rank)\n\n    # probability of selection\n    phi <- (2 * parent_rank) / (P * (P + 1))\n\n    # select first parent by parent_rank, second random\n    parent1 <- base::sample(1:P, 1, prob = phi, replace = T)\n    parent2 <- base::sample((1:P)[-parent1], 1, replace = T)\n\n    return(c(parent1, parent2))\n}\n\n#' Parent Chromosome Crossover\n#'\n#' Parent chromosomes selected by \\code{\\link{select_parents}} will be used to generate new children using concept of crossover to combine genetic data to produce offspring. Parents are selected for crossover according to probability of crossover. If crossover does not occour, parent chromosomes are passed exactly to offpsring. This function produces two children from each parent chromosomes mate pair using one of three methods.\n#'\n#' \\describe{\n#' \\item{Method 1}{Multipoint crossover. Parent data is exchanged at three randomly selected crossover points along the chromosome to produce two offspring.}\n#' \\item{Method 2}{Probabilities for each gene are created from according to relative rankings of each parent and then child genotypes are sampled from \\code{\\link{rbinom}} using those probabilities.}\n#' \\item{Method 3}{Condordant mate pair genes are passed directly offspring, and non-corcordant genes are sampled from \\code{\\link{rbinom}} using probabilities proportional to relative ranking of each parent.}\n#' }\n#'\n#' @param generation_t0 a matrix of parent chromosomes to be evaluated. Columns correspond to predictors/genes and rows correspond to parents/chromosomes.\n#' @param parentInd a vector containing the rank indexes of two parents selected for crossover.\n#' @param crossover_method a character string indicating which method of crossover to be used, default is method 1, multipoint crossover.\n#' @param pCrossover a number between 0 and 1 indicating the probability of crossover for each mate pair. Default is 0.8.\n#' @param parent_rank a integer vector of fitness ranks for parent chromosomes.\n#'\n#' References:\n#' Geof H. Givens, Jennifer A. Hoeting (2013) Combinatorial Optimization (italicize). Chapter 3 of Computational Statistics (italicize).\n#' @export\n\ncrossover_parents <- function(generation_t0, parentInd,\n                              crossover_method, pCrossover, parent_rank)  {\n\n    # get parent info\n    parent1 <- generation_t0[parentInd[1], ]\n    parent2 <- generation_t0[parentInd[2], ]\n    C <- length(parent1)\n    parent1r <- parent_rank[parentInd[1]]\n    parent2r <- parent_rank[parentInd[2]]\n\n    if (stats::rbinom(1, 1, pCrossover) == 1 ) {\n        if (crossover_method == \"method1\") {\n\n            #METHOD 1 ----------------\n            #multipoint crossover: three crossover points\n            cross <- sort(sample(seq(2,(C - 2), 2), 3, replace = F))\n\n            child1 <- as.integer(c(parent1[1:cross[1]],\n                            parent2[(cross[1] + 1):cross[2]],\n                            parent1[(cross[2] + 1):cross[3]],\n                            parent2[(cross[3] + 1):C]))\n            child2 <- as.integer(c(parent2[1:cross[1]],\n                            parent1[(cross[1] + 1):cross[2]],\n                            parent2[(cross[2] + 1):cross[3]],\n                            parent2[(cross[3] + 1):C]))\n\n        } else if (crossover_method == \"method2\") {\n\n            #METHOD 2 ----------------\n            #method upweights parent with higher parent_rank high\n            childProb <- parent1 * parent1r[1] /\n                (parent1r + parent2r) +\n                parent2 * parent2r /\n                (parent1r + parent2r)\n            child1 <- stats::rbinom(C, 1, prob = childProb)\n            child2 <- stats::rbinom(C, 1, prob = childProb)\n\n        } else if (crossover_method == \"method3\") {\n\n            #METHOD 3 ----------------\n            #randomly samples non-concordant variables between parents\n            # slightly upweights parent selected by prob. proportional to parent_rank\n            child1 <- parent1\n            child2 <- parent2\n            child1[parent1 != parent2] <-\n                stats::rbinom(sum(parent1 - parent2 != 0), 1,\n                       prob = parent1r / (parent1r + parent2r))\n            child2[parent1 != parent2] <-\n                stats::rbinom(sum(parent1 - parent2 != 0), 1,\n                       prob = parent2r / (parent1r + parent2r))\n        }\n        return(rbind(as.integer(child1), as.integer(child2)))\n    } else {\n        child1 <- parent1\n        child2 <- parent2\n        return(rbind(child1, child2))\n    }\n}\n\n\n#' Child Chromosome Mutagenesis.\n#'\n#' Child chromosomes produced using \\code{\\link{crossover_parents}} passed to this function will be modified using concept of genetic mutation, whereby a polymorphisms are produced according to a probably of mutatgenesis. Here, the default mutation rate is proportional to the size of the popluation, P, and number of chromosomes, C, \\eqn{\\frac{1}{P * C^{0.5}}}. User's can specify the mutation rate in \\code{\\link{select}}.\n#'\n#' @param mutation_rate an optional numeric value between 0 and 1 indicating mutation rate.\n#' @param child a vector containing the chromosome of child produced by crossover.\n#' @param P an integer indicating the number of parent chromosomes.\n#' @param C an integer indicating the number of predictor variables or genes.\n#'\n#' @export\n\nmutate_child <- function(mutation_rate, child, P, C) {\n\n    if (is.null(mutation_rate)) {\n        return(as.integer(abs(round(child, 0) -\n                        stats::rbinom(C, 1,\n                                    prob = 1 / (P * sqrt(C))))))\n    } else {\n\n        if (mutation_rate > 1 | mutation_rate < 0) {\n            stop(\"Error: mutation_rate must be between 0 and 1\")\n        }\n\n        return(as.integer(abs(round(child, 0) -\n                        stats::rbinom(C, 1,\n                                    prob = mutation_rate))))\n    }\n}\n\n\n",
    "created" : 1513169663684.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3998661806",
    "id" : "E65C8FEF",
    "lastKnownWriteTime" : 1513234368,
    "last_content_update" : 1513234368214,
    "path" : "~/repos/STAT243/project/GA/R/selection_crossover_mutation.R",
    "project_path" : "R/selection_crossover_mutation.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}