{
    "collab_server" : "",
    "contents" : "################################################################\n#\n# Plot GA output function\n# Xu, Weijie; Chen, Yuwen; Adams, Cameron; Zhou, Yilin\n#\n# Final Projct\n# STAT 243\n# Fall 2017\n#\n################################################################\n\n#' Plotting function for GA object\n#'\n#' Takes as input from \\code{\\link{select}} and creates a plot of fitness for all generations and lines plots of mean and max fitness across generations.\n#'\n#' @param x a GA object as generated by \\code{\\link{select}}. Must be of class GA.\n#' @param ... a\n#' @param col1 a character string for color of chromosomes scatter plotpoints. Default is blue.\n#' @param col2 a character string for color of chromosomes mean and max lines. Default is red.\n#'\n#' @export\n\nplot.GA <- function(x, ..., col1 = \"blue\", col2 = \"red\") {\n  \n  # error checking\n  if (!is.character(col1)) stop(\"Error: col1 must be a character string of length 1\")\n  if (length(col1) > 1) stop(\"Error: col1 must be a character string of length 1\")\n  if (!is.character(col2)) stop(\"Error: col1 must be a character string of length 1\")\n  if (length(col2) > 1) stop(\"Error: col1 must be a character string of length 1\")\n  \n  # get plot data from GA object\n  convergeData <- x$convergeData\n  obj_fun <- as.character(x$optimize[1])\n  minimize <- x$optimize[3]\n  method <- as.character(x$optimize[4])\n  iter <- x$iter\n  \n  # scatter plot of chromosome data across generations ----------------\n  \n  # check for scales packages\n  if (requireNamespace(\"scales\", quietly = TRUE)) {\n    \n    # with scales\n    graphics::plot(jitter(rep(1, nrow(convergeData))), convergeData[, 2, 1], type = \"p\",\n                   pch = 19, col = scales::alpha(col1, 0.1),\n                   ylim = c(min(convergeData[ , 2, ], na.rm = T),\n                            max(convergeData[ , 2, ], na.rm = T)),\n                   xlim = c(1, iter), xlab = \"Generations\", ylab = obj_fun,\n                   main = paste(\"GA performance: \\n \", obj_fun, method))\n    for (i in 2:iter) {\n      graphics::points(jitter(rep(i, nrow(convergeData))),\n                       convergeData[, 2, i], type = \"p\",\n                       pch = 19, col = scales::alpha(col1, 0.25))\n    }\n  } else {\n    \n    # without scales\n    graphics::plot(jitter(rep(1, nrow(convergeData))), convergeData[, 2, 1], type = \"p\",\n                   pch = 19, col = col1,\n                   ylim = c(min(convergeData[ , 2, ], na.rm = T),\n                            max(convergeData[ , 2, ], na.rm = T)),\n                   xlim = c(1, iter), xlab = \"Generations\", ylab = obj_fun,\n                   main = paste(\"GA performance: \\n \", obj_fun, method))\n    for (i in 2:iter) {\n      graphics::points(jitter(rep(i, nrow(convergeData))),\n                       convergeData[, 2, i], type = \"p\",\n                       pch = 19, col = \"blue\")\n    }\n  }\n  \n  # line plots of mean and max fitness per generation\n  graphics::lines(1:iter, sapply(1:iter,\n                                 function(x) convergeData[1, 2, x]), type = \"l\",\n                  col = col2, lwd = 2)\n  graphics::lines(1:iter, sapply(1:iter,\n                                 function(x) mean(convergeData[, 2, x])),\n                  col = col2, lty = 2, lwd = 2)\n  \n  # legend\n  if (minimize == TRUE) {location <- \"topright\"\n  } else {location <- \"bottomright\"}\n  graphics::legend(location, c(\"Chr fitness\", \"Best fitness\", \"Mean Fitness\"),\n                   col = c(col1, col2, col2), pch = c(19, NA, NA), lwd = c(NA, 2, 2),\n                   lty = c(NA, 1, 2), bty = \"n\")\n}\n\n\n",
    "created" : 1513175363232.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1191342532",
    "id" : "2D10144",
    "lastKnownWriteTime" : 1513236204,
    "last_content_update" : 1513236204,
    "path" : "~/repos/STAT243/project/GA/R/plot.GA.R",
    "project_path" : "R/plot.GA.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}