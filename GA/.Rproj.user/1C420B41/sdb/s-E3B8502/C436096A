{
    "collab_server" : "",
    "contents" : "context(\"selection_crossover_mutation\")\n\n#test data\nY <- as.matrix(mtcars$mpg)\nX <- as.matrix(mtcars[2:ncol(mtcars)])\ndim(X)\n\n# get input data\nC <- dim(X)[2] # number genes\nP <- 2 * C # number of chromosomes\n\n# generate chromosomes to test\ngeneSample <- sample(c(0, 1),\n                     replace = TRUE,\n                     size = ceiling(1.2 * C * P))\n\nx <- seq_along(geneSample)\nfirstGen <- split(geneSample, ceiling(x / C))\ngeneration_t0 <- matrix(unlist(unique(firstGen)[1:P]),\n                        ncol = C, byrow = TRUE)\ngeneration_t0 <- generation_t0[apply(generation_t0, 1,\n                                     function(x) !all(x == 0)), ]\n\nparentInd <- sample(1:P, 2, replace = F)\nparent_rank <- 1:P\n\nchild <-\n# select_parents ----------------\ntest_that(\"select_parents works \",\n          {test <- select_parents(parent_rank)\n              expect_is(test, \"integer\")\n              expect_type(test, \"integer\")\n              expect_true(all(!is.na(test))) # not all 0's\n              expect_equal(length(test), 2) # 2 children\n              expect_true(all(test > 0 & test <= P)) # C chromosomes\n})\n\n\n# crossover_parents ----------------\ntest_that(\"crossover_parents works and crossover method 1 works\",\n          {test <- crossover_parents(generation_t0, parentInd,\n                        crossover_method = \"method1\", pCrossover = 1, parent_rank)\n          expect_is(test, \"matrix\")\n          expect_type(test, \"integer\")\n          expect_true(any(test == 1 | test == 0)) # O's and 1's\n          expect_true(!all(test == 0)) # not all 0's\n          expect_equal(dim(test)[1], 2) # 2 children\n          expect_equal(dim(test)[2], C) # C chromosomes\n          })\n\ntest_that(\"crossover_parents works and crossover method 2 works\",\n          {test <- crossover_parents(generation_t0, parentInd,\n                        crossover_method = \"method2\", pCrossover = 1, parent_rank)\n            expect_is(test, \"matrix\")\n            expect_type(test, \"integer\")\n            expect_true(any(test == 1 | test == 0)) # O's and 1's\n            expect_true(!all(test == 0)) # not all 0's\n            expect_equal(dim(test)[1], 2) # 2 children\n            expect_equal(dim(test)[2], C) # C chromosomes\n            })\n\ntest_that(\"crossover_parents works and crossover method 3 works\",\n          {test <- crossover_parents(generation_t0, parentInd,\n                                     crossover_method = \"method3\", pCrossover = 1, parent_rank)\n            expect_is(test, \"matrix\")\n            expect_type(test, \"integer\")\n            expect_true(any(test == 1 | test == 0)) # O's and 1's\n            expect_true(!all(test == 0)) # not all 0's\n            expect_equal(dim(test)[1], 2) # 2 children\n            expect_equal(dim(test)[2], C) # C chromosomes\n            })\n\n# mutate_child ----------------\nmutation_rate <- NULL\nchild <- stats::rbinom(C, 1, runif(1, min = 0.35, max = 0.65))\n\ntest_that(\"mutate_child works when mutation_rate is null\",\n          {test <- mutate_child(mutation_rate, child, P, C)\n            expect_type(test, \"integer\")\n            expect_true(any(test == 1 | test == 0)) # O's and 1's\n            expect_true(!all(test == 0)) # not all 0's\n            expect_equal(length(test), C) # C chromosomes\n          })\n\ntest_that(\"mutate_child works when user specifies a mutation rate\",\n          {test <- mutate_child(mutation_rate = 0.01, child, P, C)\n          expect_type(test, \"integer\")\n          expect_true(any(test == 1 | test == 0)) # O's and 1's\n          expect_true(!all(test == 0)) # not all 0's\n          expect_equal(length(test), C) # C chromosomes\n          })\n\ntest_that(\"mutate_child works when user specifies a mutation rate\",\n          {test <- mutate_child(mutation_rate = 0.01, child, P, C)\n          expect_type(test, \"integer\")\n          expect_true(any(test == 1 | test == 0)) # O's and 1's\n          expect_true(!all(test == 0)) # not all 0's\n          expect_equal(length(test), C) # C chromosomes\n          })\n\ntest_that(\"mutate_child breaks when user specifies an incorrect mutation rate\",\n            {expect_error(mutate_child(mutation_rate = 1.2, child, P, C))\n            expect_error(mutate_child(mutation_rate = -0.2, child, P, C))\n          })\n\n\n",
    "created" : 1513208284649.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2575179379",
    "id" : "C436096A",
    "lastKnownWriteTime" : 1513234281,
    "last_content_update" : 1513234281870,
    "path" : "~/repos/STAT243/project/GA/tests/testthat/test-selection_crossover_mutation.R",
    "project_path" : "tests/testthat/test-selection_crossover_mutation.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}